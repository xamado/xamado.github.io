<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Xavier Amado</title><link>http://xamado.github.io/</link><description>Recent content on Xavier Amado</description><generator>Hugo</generator><language>en</language><lastBuildDate>Fri, 06 Oct 2023 00:00:00 +0000</lastBuildDate><atom:link href="http://xamado.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>UE5: Accessing BP components from CDO</title><link>http://xamado.github.io/posts/post-ue5-accessing-blueprint-cdo/</link><pubDate>Fri, 06 Oct 2023 00:00:00 +0000</pubDate><guid>http://xamado.github.io/posts/post-ue5-accessing-blueprint-cdo/</guid><description>&lt;p>I was recently trying to create an actor during runtime, and populate it with the components from another actor, specified as the &amp;ldquo;template&amp;rdquo; through it&amp;rsquo;s class. This other actor wasn&amp;rsquo;t being Spawned, but rather used as a reference.&lt;/p></description></item><item><title>Gameboy Color emulator</title><link>http://xamado.github.io/projects/rust-gameboy/</link><pubDate>Thu, 07 Jul 2022 22:58:33 -0300</pubDate><guid>http://xamado.github.io/projects/rust-gameboy/</guid><description>&lt;p>I wrote this emulator while learning about Rust. The emulator is complete, although some games that rely on specific quirks on the original
hardware might not work perfectly.&lt;/p>
&lt;p>For the most part it was able to play through any of the &amp;ldquo;popular&amp;rdquo; games including the amazing audio track in Zelda&amp;rsquo;s splash screen.&lt;/p>
&lt;p>
 &lt;figure>
 &lt;img src="gbc-zelda.png" alt="Image alt dasdasd">
 &lt;figcaption>Zelda Link&amp;#39;s Awakening for GameBoy Color. Ignore de 44ms in the title, Windows snip tool freezes the rendering while taking the screenshot.&lt;/figcaption>
 &lt;/figure>
&lt;/p></description></item><item><title>Rust Pathtracer</title><link>http://xamado.github.io/projects/rust-pathtracer/</link><pubDate>Thu, 07 Jul 2022 22:58:33 -0300</pubDate><guid>http://xamado.github.io/projects/rust-pathtracer/</guid><description>&lt;p>Another small project to have a bit more fun with Rust. It&amp;rsquo;s a very basic Path tracer.&lt;/p>
&lt;p>
 &lt;figure>
 &lt;img src="pathtracer1.png" alt="Image alt Main">
 &lt;figcaption>Basic path tracer&lt;/figcaption>
 &lt;/figure>
&lt;/p></description></item><item><title>Rust Quake Rasterizer</title><link>http://xamado.github.io/projects/rust-quake/</link><pubDate>Thu, 07 Jul 2022 22:58:33 -0300</pubDate><guid>http://xamado.github.io/projects/rust-quake/</guid><description>&lt;p>Decided to implement a software rasterizer in Rust, and what better way to do it than using Quake 1 levels?&lt;/p>
&lt;p>Still working on this project but so far it supports:&lt;/p>
&lt;ul>
&lt;li>Vertex transform pipeline&lt;/li>
&lt;li>Rasterizer using barycentric coordinates (as opposed to Quakes scanline rasterizer)&lt;/li>
&lt;li>PVS for determining the leafs to render&lt;/li>
&lt;li>Texture mapping (using just mip 0 for now)&lt;/li>
&lt;/ul>
&lt;p>I still have lots of work to do on it, I haven&amp;rsquo;t even started looking into optimizing it much. I did try
rasterizing triangles using tiles to skip big portions of &amp;ldquo;inside&amp;rdquo; pixels, but I didn&amp;rsquo;t get as much improvement
as I meant, so for now its disabled.&lt;/p></description></item><item><title>Spark Game Engine</title><link>http://xamado.github.io/projects/spark/</link><pubDate>Thu, 07 Jul 2022 22:58:33 -0300</pubDate><guid>http://xamado.github.io/projects/spark/</guid><description>&lt;p>Spark is a Game Engine I have been working on for&amp;hellip; ever. Started originally in 2009, but since it was always a pet/educational project I never really did anything with it, other than, well, learn! I don&amp;rsquo;t have any delusions of ever it becoming anything other than a way for me to learn and research things that interest me.&lt;/p>
&lt;p>Key features:&lt;/p>
&lt;ul>
&lt;li>Some C++ 20 features. I&amp;rsquo;m not keen on using modern C++ just because it exists, but there&amp;rsquo;s a few things that I do like, like lambdas, std::function, auto for iterators and most recently std::format, which is much more clean than any string formatting ever before in C++.&lt;/li>
&lt;li>C++ Reflection system, allows for specifying constructors, methods and properties on objects which can be later queried and set from code, for example when parsing a scene file.&lt;/li>
&lt;li>Designed to be API agnostic, but currently only working on DirectX12.&lt;/li>
&lt;li>Embedded scripting using Mono/C#&lt;/li>
&lt;li>PBR renderer&lt;/li>
&lt;li>Dynamic Diffuse Global Illumination using Raytracing (RTX)&lt;/li>
&lt;li>Basic tools with scene editing, asset viewing/editing, asset browser, gizmos, etc.&lt;/li>
&lt;li>Texture loading from TGA, PNG, JPG or DDS files.&lt;/li>
&lt;li>Mesh loading from FBX files using the official FbxSDK&lt;/li>
&lt;/ul>
&lt;p>
 &lt;figure>
 &lt;img src="spark1.png" alt="Image alt Main">
 &lt;figcaption>Main editor view&lt;/figcaption>
 &lt;/figure>
&lt;/p></description></item><item><title>About</title><link>http://xamado.github.io/about/</link><pubDate>Thu, 07 Jul 2022 22:21:35 -0300</pubDate><guid>http://xamado.github.io/about/</guid><description>&lt;p>My name is Xavier Amado and I&amp;rsquo;m a Game Developer!&lt;/p>
&lt;p>I consider myself a problem-solver, hardworking and curious individual, most of my experience comes from a personal itch about learning how things work.&lt;/p>
&lt;p>I started &amp;ldquo;programming&amp;rdquo; when I was only 6 years old on a Commodore64 using Logo, then moved on to Basic, Pascal, C++ and never stopped. My first involvement in real game development was when GarageGames open-sourced the Torque Game Engine, back in a world where Game Engines were close guarded secrets and licenses costed millions, it was a great learning opportunity for me.&lt;/p></description></item></channel></rss>